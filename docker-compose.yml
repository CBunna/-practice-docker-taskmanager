version: "3.8"

services:
  postgres:
    image: postgres:15-alpine
    container_name: task-manager-db
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "${DB_PORT}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - task-network

  backend:
    build: ./backend
    container_name: task-manager-backend
    environment:
      - NODE_ENV=${NODE_ENV}
      - DB_HOST=postgres
      - DB_USER=${POSTGRES_USER}
      - DB_PASSWORD=${POSTGRES_PASSWORD}
      - DB_NAME=${POSTGRES_DB}
      - DB_PORT=5432
      - PORT=5002
    ports:
      - "${BACKEND_PORT}:5002"
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./backend:/app
      - /app/node_modules
    networks:
      - task-network
    restart: unless-stopped

  frontend:
    build:
      context: ./frontend
      args:
        - REACT_APP_API_URL=http://localhost:${BACKEND_PORT}/api
    container_name: task-manager-frontend
    environment:
      - NODE_ENV=${NODE_ENV}
      - REACT_APP_API_URL=http://localhost:${BACKEND_PORT}/api
    ports:
      - "${FRONTEND_PORT}:80"
    depends_on:
      - backend
    volumes:
      - ./frontend/src:/app/src
    networks:
      - task-network
    restart: unless-stopped

  nginx:
    build: ./nginx
    container_name: task-manager-nginx
    ports:
      - "${NGINX_PORT}:80"
    depends_on:
      - frontend
      - backend
    networks:
      - task-network
    restart: unless-stopped

volumes:
  postgres_data:

networks:
  task-network:
    driver: bridge
